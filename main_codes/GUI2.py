# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'GUI2.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import Qt, QtCore, QtGui, QtWidgets
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtPrintSupport import *
from PyQt5.QtMultimedia import *
from PyQt5.QtMultimediaWidgets import *
# from PyQt5 import pyqtThread, pyqtSignal
import Command_Input as cmd
from StaticVar import StaticVar

import os
import sys
import time
import logging
import cv2

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1248, 878)
        MainWindow.setAutoFillBackground(False)
        MainWindow.setStyleSheet("background-color: rgb(224, 224, 224);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.lcdX = QtWidgets.QLCDNumber(self.centralwidget)
        self.lcdX.setGeometry(QtCore.QRect(70, 620, 100, 50))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.lcdX.setFont(font)
        self.lcdX.setStyleSheet("background-color: rgb(224, 224, 224);\n""")
        self.lcdX.setSmallDecimalPoint(False)
        self.lcdX.setDigitCount(8)
        self.lcdX.setSegmentStyle(QtWidgets.QLCDNumber.Filled)
        self.lcdX.setProperty("value", 0.0)
        self.lcdX.setProperty("intValue", 0)
        self.lcdX.setObjectName("lcdX")
        self.lcdY = QtWidgets.QLCDNumber(self.centralwidget)
        self.lcdY.setGeometry(QtCore.QRect(270, 620, 100, 50))
        self.lcdY.setStyleSheet("background-color: rgb(224, 224, 224);")
        self.lcdY.setSmallDecimalPoint(False)
        self.lcdY.setDigitCount(8)
        self.lcdY.setSegmentStyle(QtWidgets.QLCDNumber.Filled)
        self.lcdY.setProperty("value", 0.0)
        self.lcdY.setProperty("intValue", 0)
        self.lcdY.setObjectName("lcdY")
        self.lcdZ = QtWidgets.QLCDNumber(self.centralwidget)
        self.lcdZ.setGeometry(QtCore.QRect(470, 620, 100, 50))
        self.lcdZ.setStyleSheet("background-color: rgb(224, 224, 224);")
        self.lcdZ.setSmallDecimalPoint(False)
        self.lcdZ.setDigitCount(8)
        self.lcdZ.setSegmentStyle(QtWidgets.QLCDNumber.Filled)
        self.lcdZ.setProperty("value", 138.0)
        self.lcdZ.setProperty("intValue", 138)
        self.lcdZ.setObjectName("lcdZ")
        self.lcdRx = QtWidgets.QLCDNumber(self.centralwidget)
        self.lcdRx.setGeometry(QtCore.QRect(670, 620, 100, 50))
        self.lcdRx.setStyleSheet("background-color: rgb(224, 224, 224);")
        self.lcdRx.setSmallDecimalPoint(False)
        self.lcdRx.setDigitCount(8)
        self.lcdRx.setSegmentStyle(QtWidgets.QLCDNumber.Filled)
        self.lcdRx.setProperty("value", 0.0)
        self.lcdRx.setProperty("intValue", 0)
        self.lcdRx.setObjectName("lcdRx")
        self.lcdRy = QtWidgets.QLCDNumber(self.centralwidget)
        self.lcdRy.setGeometry(QtCore.QRect(870, 620, 100, 50))
        self.lcdRy.setStyleSheet("background-color: rgb(224, 224, 224);")
        self.lcdRy.setSmallDecimalPoint(False)
        self.lcdRy.setDigitCount(8)
        self.lcdRy.setSegmentStyle(QtWidgets.QLCDNumber.Filled)
        self.lcdRy.setProperty("value", 0.0)
        self.lcdRy.setProperty("intValue", 0)
        self.lcdRy.setObjectName("lcdRy")
        self.lcdRz = QtWidgets.QLCDNumber(self.centralwidget)
        self.lcdRz.setGeometry(QtCore.QRect(1070, 620, 100, 50))
        self.lcdRz.setStyleSheet("background-color: rgb(224, 224, 224);")
        self.lcdRz.setSmallDecimalPoint(False)
        self.lcdRz.setDigitCount(8)
        self.lcdRz.setSegmentStyle(QtWidgets.QLCDNumber.Filled)
        self.lcdRz.setProperty("value", 0.0)
        self.lcdRz.setObjectName("lcdRz")
        self.pushButton_start = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_start.setGeometry(QtCore.QRect(850, 450, 150, 60))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.pushButton_start.setFont(font)
        self.pushButton_start.setObjectName("pushButton_start")
        self.pushButton_close = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_close.setGeometry(QtCore.QRect(1000, 450, 150, 60))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.pushButton_close.setFont(font)
        self.pushButton_close.setObjectName("pushButton_close")
        self.pushButton_disarm = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_disarm.setGeometry(QtCore.QRect(1000, 520, 150, 60))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.pushButton_disarm.setFont(font)
        self.pushButton_disarm.setObjectName("pushButton_disarm")
        self.pushButton_stop = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_stop.setGeometry(QtCore.QRect(850, 520, 150, 60))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.pushButton_stop.setFont(font)
        self.pushButton_stop.setObjectName("pushButton_stop")        
        self.pushButton_Xp = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Xp.setGeometry(QtCore.QRect(70, 680, 51, 23))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_Xp.setFont(font)
        self.pushButton_Xp.setObjectName("pushButton_Xp")
        self.pushButton_Xm = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Xm.setGeometry(QtCore.QRect(120, 680, 51, 23))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_Xm.setFont(font)
        self.pushButton_Xm.setObjectName("pushButton_Xm")
        self.pushButton_Ym = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Ym.setGeometry(QtCore.QRect(320, 680, 51, 23))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_Ym.setFont(font)
        self.pushButton_Ym.setObjectName("pushButton_Ym")
        self.pushButton_Yp = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Yp.setGeometry(QtCore.QRect(270, 680, 51, 23))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_Yp.setFont(font)
        self.pushButton_Yp.setObjectName("pushButton_Yp")
        self.pushButton_Zm = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Zm.setGeometry(QtCore.QRect(520, 680, 51, 23))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_Zm.setFont(font)
        self.pushButton_Zm.setObjectName("pushButton_Zm")
        self.pushButton_Zp = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Zp.setGeometry(QtCore.QRect(470, 680, 51, 23))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_Zp.setFont(font)
        self.pushButton_Zp.setObjectName("pushButton_Zp")
        self.pushButton_Rxm = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Rxm.setGeometry(QtCore.QRect(720, 680, 51, 23))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_Rxm.setFont(font)
        self.pushButton_Rxm.setObjectName("pushButton_Rxm")
        self.pushButton_Rxp = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Rxp.setGeometry(QtCore.QRect(670, 680, 51, 23))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_Rxp.setFont(font)
        self.pushButton_Rxp.setObjectName("pushButton_Rxp")
        self.pushButton_Ryp = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Ryp.setGeometry(QtCore.QRect(870, 680, 51, 23))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_Ryp.setFont(font)
        self.pushButton_Ryp.setObjectName("pushButton_Ryp")
        self.pushButton_Rym = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Rym.setGeometry(QtCore.QRect(920, 680, 51, 23))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_Rym.setFont(font)
        self.pushButton_Rym.setObjectName("pushButton_Rym")
        self.pushButton_Rzp = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Rzp.setGeometry(QtCore.QRect(1070, 680, 51, 23))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_Rzp.setFont(font)
        self.pushButton_Rzp.setObjectName("pushButton_Rzp")
        self.pushButton_Rzm = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Rzm.setGeometry(QtCore.QRect(1120, 680, 51, 23))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_Rzm.setFont(font)
        self.pushButton_Rzm.setObjectName("pushButton_Rzm")
        self.textEdit_gotocommands = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_gotocommands.setGeometry(QtCore.QRect(10, 750, 320, 80))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.textEdit_gotocommands.setFont(font)
        self.textEdit_gotocommands.setObjectName("textEdit_gotocommands")
        self.verticalScrollBar_goto = QtWidgets.QScrollBar(self.centralwidget)
        self.verticalScrollBar_goto.setGeometry(QtCore.QRect(330, 750, 20, 81))
        self.verticalScrollBar_goto.setOrientation(QtCore.Qt.Vertical)
        self.verticalScrollBar_goto.setObjectName("verticalScrollBar_goto")
        self.pushButton_gotosend = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_gotosend.setGeometry(QtCore.QRect(360, 750, 111, 81))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_gotosend.setFont(font)
        self.pushButton_gotosend.setObjectName("pushButton_gotosend")
        self.label_errorlog = QtWidgets.QLabel(self.centralwidget)
        self.label_errorlog.setGeometry(QtCore.QRect(500, 710, 81, 40))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_errorlog.setFont(font)
        self.label_errorlog.setObjectName("label_errorlog")
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setEnabled(True)
        self.textBrowser.setGeometry(QtCore.QRect(500, 750, 320, 80))
        self.textBrowser.setObjectName("textBrowser")
        self.label_status = QtWidgets.QLabel(self.centralwidget)
        self.label_status.setGeometry(QtCore.QRect(360, 580, 121, 41))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label_status.setFont(font)
        self.label_status.setObjectName("label_status")
        self.label_statusdata = QtWidgets.QLabel(self.centralwidget)
        self.label_statusdata.setGeometry(QtCore.QRect(480, 580, 161, 40))

        self.label_IL = QtWidgets.QLabel(self.centralwidget)
        self.label_IL.setGeometry(QtCore.QRect(680, 580, 121, 41))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label_IL.setFont(font)
        self.label_IL.setObjectName("label_IL")
        self.label_IL.setText("IL: ")

        font = QtGui.QFont()
        font.setPointSize(20)
        self.label_statusdata.setFont(font)
        self.label_statusdata.setStyleSheet("color: rgb(255, 0, 0);")
        self.label_statusdata.setObjectName("label_statusdata")
        self.label_X = QtWidgets.QLabel(self.centralwidget)
        self.label_X.setGeometry(QtCore.QRect(10, 620, 50, 40))
        font = QtGui.QFont()
        font.setPointSize(25)
        self.label_X.setFont(font)
        self.label_X.setAlignment(QtCore.Qt.AlignCenter)
        self.label_X.setObjectName("label_X")
        self.label_Y = QtWidgets.QLabel(self.centralwidget)
        self.label_Y.setGeometry(QtCore.QRect(200, 620, 50, 40))
        font = QtGui.QFont()
        font.setPointSize(25)
        self.label_Y.setFont(font)
        self.label_Y.setAlignment(QtCore.Qt.AlignCenter)
        self.label_Y.setObjectName("label_Y")
        self.label_Z = QtWidgets.QLabel(self.centralwidget)
        self.label_Z.setGeometry(QtCore.QRect(400, 620, 50, 40))
        font = QtGui.QFont()
        font.setPointSize(25)
        self.label_Z.setFont(font)
        self.label_Z.setAlignment(QtCore.Qt.AlignCenter)
        self.label_Z.setObjectName("label_Z")
        self.label_Rx = QtWidgets.QLabel(self.centralwidget)
        self.label_Rx.setGeometry(QtCore.QRect(600, 620, 50, 40))
        font = QtGui.QFont()
        font.setPointSize(25)
        self.label_Rx.setFont(font)
        self.label_Rx.setAlignment(QtCore.Qt.AlignCenter)
        self.label_Rx.setObjectName("label_Rx")
        self.label_Ry = QtWidgets.QLabel(self.centralwidget)
        self.label_Ry.setGeometry(QtCore.QRect(800, 620, 50, 40))
        font = QtGui.QFont()
        font.setPointSize(25)
        self.label_Ry.setFont(font)
        self.label_Ry.setAlignment(QtCore.Qt.AlignCenter)
        self.label_Ry.setObjectName("label_Ry")
        self.label_Rz = QtWidgets.QLabel(self.centralwidget)
        self.label_Rz.setGeometry(QtCore.QRect(1000, 620, 50, 40))
        font = QtGui.QFont()
        font.setPointSize(25)
        self.label_Rz.setFont(font)
        self.label_Rz.setAlignment(QtCore.Qt.AlignCenter)
        self.label_Rz.setObjectName("label_Rz")
        self.label_goto = QtWidgets.QLabel(self.centralwidget)
        self.label_goto.setGeometry(QtCore.QRect(10, 710, 280, 40))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_goto.setFont(font)
        self.label_goto.setObjectName("label_goto")
        self.stepSizeComboBox = QtWidgets.QComboBox(self.centralwidget)
        self.stepSizeComboBox.setGeometry(QtCore.QRect(150, 580, 121, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.stepSizeComboBox.setFont(font)
        self.stepSizeComboBox.setObjectName("stepSizeComboBox")
        self.stepSizeComboBox.addItem("")
        self.stepSizeComboBox.addItem("")
        self.stepSizeComboBox.addItem("")
        self.stepSizeComboBox.addItem("")
        self.stepSizeComboBox.addItem("")
        self.stepSizeComboBox.addItem("")
        self.stepSizeComboBox.addItem("")
        self.label_stepsize = QtWidgets.QLabel(self.centralwidget)
        self.label_stepsize.setGeometry(QtCore.QRect(30, 580, 121, 31))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label_stepsize.setFont(font)
        self.label_stepsize.setObjectName("label_stepsize")
        
        self.productComboBox = QtWidgets.QComboBox(self.centralwidget)
        self.productComboBox.setGeometry(QtCore.QRect(215, 510, 121, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.productComboBox.setFont(font)
        self.productComboBox.setObjectName("productComboBox")
        self.productComboBox.addItem("")
        self.productComboBox.addItem("")
        self.label_product = QtWidgets.QLabel(self.centralwidget)
        self.label_product.setGeometry(QtCore.QRect(30, 510, 165, 31))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label_product.setFont(font)
        self.label_product.setObjectName("label_product")

        self.criteriaComboBox = QtWidgets.QComboBox(self.centralwidget)
        self.criteriaComboBox.setGeometry(QtCore.QRect(480,510,100,31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.criteriaComboBox.setFont(font)
        self.criteriaComboBox.setObjectName("criteriaComboBox")
        self.criteriaComboBox.addItem("")
        self.criteriaComboBox.addItem("")
        self.criteriaComboBox.addItem("")
        self.criteriaComboBox.addItem("")
        self.criteriaComboBox.addItem("")
        self.criteriaComboBox.addItem("")
        self.criteriaComboBox.addItem("")
        self.label_criteria = QtWidgets.QLabel(self.centralwidget)
        self.label_criteria.setGeometry(QtCore.QRect(350,510,121,31))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label_criteria.setFont(font)
        self.label_criteria.setObjectName("label_criteria")

        self.label_key_press = QtWidgets.QLabel(self.centralwidget)
        self.label_key_press.setGeometry(QtCore.QRect(50, 540, 500, 30))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label_key_press.setFont(font)
        self.label_key_press.setObjectName("label_key_press")

        self.pushButton_reset = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_reset.setGeometry(QtCore.QRect(850, 50, 300, 60))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.pushButton_reset.setFont(font)
        self.pushButton_reset.setObjectName("pushButton_reset")
        self.pushButton_reset.setStyleSheet("background-color: red")

        self.pushButton_alignment = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_alignment.setGeometry(QtCore.QRect(850, 150, 300, 60))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.pushButton_alignment.setFont(font)
        self.pushButton_alignment.setObjectName("pushButton_alignment")
        self.pushButton_alignment.setStyleSheet("background-color: red")
        # self.pushButton_alignment.setEnabled(False)

        self.pushButton_pre_curing = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_pre_curing.setGeometry(QtCore.QRect(850, 250, 300, 60))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.pushButton_pre_curing.setFont(font)
        self.pushButton_pre_curing.setObjectName("pushButton_pre_curing")
        self.pushButton_pre_curing.setStyleSheet("background-color: red")
        # self.pushButton_pre_curing.setEnabled(False)

        self.pushButton_curing = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_curing.setGeometry(QtCore.QRect(850, 350, 300, 60))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.pushButton_curing.setFont(font)
        self.pushButton_curing.setObjectName("pushButton_curing")
        self.pushButton_curing.setStyleSheet("background-color: red")
        # self.pushButton_curing.setEnabled(False)

        self.comboBox_camera = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_camera.setGeometry(QtCore.QRect(70, 0, 211, 31))
        self.comboBox_camera.setObjectName("comboBox_camera")
        self.label_camera = QtWidgets.QLabel(self.centralwidget)
        self.label_camera.setGeometry(QtCore.QRect(10, 0, 61, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_camera.setFont(font)
        self.label_camera.setObjectName("label_camera")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1248, 21))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuConnection = QtWidgets.QMenu(self.menubar)
        self.menuConnection.setObjectName("menuConnection")
        self.menuDebug = QtWidgets.QMenu(self.menubar)
        self.menuDebug.setObjectName("menuDebug")
        self.menuDemo = QtWidgets.QMenu(self.menubar)
        self.menuDemo.setObjectName("menuDemo")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionOpen = QtWidgets.QAction(MainWindow)
        self.actionOpen.setObjectName("actionOpen")
        self.actionDemo_1 = QtWidgets.QAction(MainWindow)
        self.actionDemo_1.setObjectName("actionDemo_1")
        self.actionDemo_2 = QtWidgets.QAction(MainWindow)
        self.actionDemo_2.setObjectName("actionDemo_2")
        self.actionDemo_3 = QtWidgets.QAction(MainWindow)
        self.actionDemo_3.setObjectName("actionDemo_3")
        self.menuFile.addAction(self.actionOpen)
        self.menuDemo.addAction(self.actionDemo_1)
        self.menuDemo.addAction(self.actionDemo_2)
        self.menuDemo.addAction(self.actionDemo_3)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuConnection.menuAction())
        self.menubar.addAction(self.menuDebug.menuAction())
        self.menubar.addAction(self.menuDemo.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # Button trigger events @Shen
        self.pushButton_start.clicked.connect(self.calibration_click)
        self.pushButton_close.clicked.connect(self.close_click)
        self.pushButton_disarm.clicked.connect(self.disarm_click)
        self.pushButton_stop.clicked.connect(self.stop_click)
        self.actionDemo_1.triggered.connect(lambda: self.click_to_send('demo1'))
        self.actionDemo_2.triggered.connect(lambda: self.click_to_send('demo2'))
        self.actionDemo_3.triggered.connect(lambda: self.click_to_send('demo3'))
        self.pushButton_gotosend.clicked.connect(self.send_click)
        self.stepSizeComboBox.currentIndexChanged.connect(self.step_choose)
        self.productComboBox.currentIndexChanged.connect(self.product_choose)
        self.criteriaComboBox.currentIndexChanged.connect(self.criteria_choose)

        ##################################################
        self.pushButton_Xp.clicked.connect(lambda: self.xplus_click(self.step))
        self.pushButton_Xm.clicked.connect(lambda: self.xminus_click(self.step))
        self.pushButton_Yp.clicked.connect(lambda: self.yplus_click(self.step))
        self.pushButton_Ym.clicked.connect(lambda: self.yminus_click(self.step))
        self.pushButton_Zp.clicked.connect(lambda: self.zplus_click(self.step))
        self.pushButton_Zm.clicked.connect(lambda: self.zminus_click(self.step))
        ##################################################
        self.pushButton_Rxp.clicked.connect(lambda: self.Rxplus_click(self.step))
        self.pushButton_Rxm.clicked.connect(lambda: self.Rxminus_click(self.step))
        self.pushButton_Ryp.clicked.connect(lambda: self.Ryplus_click(self.step))
        self.pushButton_Rym.clicked.connect(lambda: self.Ryminus_click(self.step))
        self.pushButton_Rzp.clicked.connect(lambda: self.Rzplus_click(self.step))
        self.pushButton_Rzm.clicked.connect(lambda: self.Rzminus_click(self.step))
        self.pushButton_reset.clicked.connect(self.reset_click)
        self.pushButton_alignment.clicked.connect(self.alignment_click)
        self.pushButton_pre_curing.clicked.connect(self.pre_curing_click)
        self.pushButton_curing.clicked.connect(self.curing_click)

        # # Camera configuration @Jerry
        self.available_cameras = QCameraInfo.availableCameras()
        if not self.available_cameras:
                pass #quit
        
        # self.viewfinder = QCameraViewfinder(self.centralwidget)
        # self.viewfinder.setGeometry(QtCore.QRect(20,30,600,400))
        # self.viewfinder.show()
        self.cameraLabel = QLabel(self)
        self.cameraLabel.setGeometry(QtCore.QRect(20,30,640,480))
        th = Thread(self)
        th.changePixmap.connect(self.setImage)
        th.start()
        # self.select_camera(0)
        self.comboBox_camera.addItems([c.description() for c in self.available_cameras])
        self.comboBox_camera.currentIndexChanged.connect(self.RefreshCameraThread)

    @pyqtSlot(QImage)
    def setImage(self, image):
        self.cameraLabel.setPixmap(QPixmap.fromImage(image))

    @pyqtSlot()
    def RefreshCameraThread(self, cameraIdx):
        th = Thread(self)
        th.changePixmap.connect(self.setImage)
        th.start()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "HPP System"))
        self.pushButton_start.setText(_translate("MainWindow", "Calibration"))
        self.pushButton_close.setText(_translate("MainWindow", "Close"))
        self.pushButton_disarm.setText(_translate("MainWindow", "Disarm"))
        self.pushButton_stop.setText(_translate("MainWindow", "Cancle Run"))
        self.pushButton_Xp.setText(_translate("MainWindow", "+"))
        self.pushButton_Xm.setText(_translate("MainWindow", "-"))
        self.pushButton_Ym.setText(_translate("MainWindow", "-"))
        self.pushButton_Yp.setText(_translate("MainWindow", "+"))
        self.pushButton_Zm.setText(_translate("MainWindow", "-"))
        self.pushButton_Zp.setText(_translate("MainWindow", "+"))
        self.pushButton_Rxm.setText(_translate("MainWindow", "-"))
        self.pushButton_Rxp.setText(_translate("MainWindow", "+"))
        self.pushButton_Ryp.setText(_translate("MainWindow", "+"))
        self.pushButton_Rym.setText(_translate("MainWindow", "-"))
        self.pushButton_Rzp.setText(_translate("MainWindow", "+"))
        self.pushButton_Rzm.setText(_translate("MainWindow", "-"))
        self.pushButton_gotosend.setText(_translate("MainWindow", "SEND"))
        self.label_errorlog.setText(_translate("MainWindow", "Error Log:"))
        self.textBrowser.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
        "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
        "p, li { white-space: pre-wrap; }\n"
        "</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
        "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">No Error</p></body></html>"))
        self.label_status.setText(_translate("MainWindow", "Status:"))
        self.label_statusdata.setText(_translate("MainWindow", "Disarmed"))
        self.label_X.setText(_translate("MainWindow", "X"))
        self.label_Y.setText(_translate("MainWindow", "Y"))
        self.label_Z.setText(_translate("MainWindow", "Z"))
        self.label_Rx.setText(_translate("MainWindow", "Rx"))
        self.label_Ry.setText(_translate("MainWindow", "Ry"))
        self.label_Rz.setText(_translate("MainWindow", "Rz"))
        self.label_goto.setText(_translate("MainWindow", "Goto Commands (Seperate with \',\')"))
        self.stepSizeComboBox.setItemText(0, _translate("MainWindow", "0.2um"))
        self.stepSizeComboBox.setItemText(1, _translate("MainWindow", "1um"))
        self.stepSizeComboBox.setItemText(2, _translate("MainWindow", "5um"))
        self.stepSizeComboBox.setItemText(3, _translate("MainWindow", "20um"))
        self.stepSizeComboBox.setItemText(4, _translate("MainWindow", "200um"))
        self.stepSizeComboBox.setItemText(5, _translate("MainWindow", "0.1degree"))
        self.stepSizeComboBox.setItemText(6, _translate("MainWindow", "0.5degree"))
        self.label_stepsize.setText(_translate("MainWindow", "Step Size:"))
        self.productComboBox.setItemText(0, _translate("MainWindow", "1xN"))
        self.productComboBox.setItemText(1, _translate("MainWindow", "VOA"))
        self.criteriaComboBox.setItemText(0, _translate("MainWindow", "-0.4"))
        self.criteriaComboBox.setItemText(1, _translate("MainWindow", "-0.25"))
        self.criteriaComboBox.setItemText(2, _translate("MainWindow", "-0.3"))
        self.criteriaComboBox.setItemText(3, _translate("MainWindow", "-0.35"))
        self.criteriaComboBox.setItemText(4, _translate("MainWindow", "-0.45"))
        self.criteriaComboBox.setItemText(5, _translate("MainWindow", "-0.5"))
        self.criteriaComboBox.setItemText(6, _translate("MainWindow", "-0.55"))
        self.label_product.setText(_translate("MainWindow", "Product Type:"))
        self.label_criteria.setText(_translate("MainWindow", "Criteria:"))
        # self.label_key_press.setText(_translate("MainWindow", ""))
        self.pushButton_reset.setText(_translate("MainWindow", "Reset"))
        self.pushButton_alignment.setText(_translate("MainWindow", "Alignment"))
        self.pushButton_pre_curing.setText(_translate("MainWindow", "Pre-Curing"))
        self.pushButton_curing.setText(_translate("MainWindow", "Curing"))
        self.label_camera.setText(_translate("MainWindow", "Camera:"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuConnection.setTitle(_translate("MainWindow", "Connection"))
        self.menuDebug.setTitle(_translate("MainWindow", "Debug"))
        self.menuDemo.setTitle(_translate("MainWindow", "Demo"))
        self.actionOpen.setText(_translate("MainWindow", "Open"))
        self.actionDemo_1.setText(_translate("MainWindow", "Demo 1"))
        self.actionDemo_2.setText(_translate("MainWindow", "Demo 2"))
        self.actionDemo_3.setText(_translate("MainWindow", "Demo 3"))


class MainWindow(QMainWindow, Ui_MainWindow):
    def __init__(self, parent=None):
        QMainWindow.__init__(self, parent=parent)
        self.setupUi(self)
        self.runthread = cmd.CMDInputThread()
        # Set up timer to update IL
        self.timer = QTimer()
        self.timer.timeout.connect(self.updateIL)
        self.timer.start(100)

    step = 0.0002
    target_mm = [0,0,138,0,0,0]

    def click_to_send(self, _cmd):
        self.runthread.setcmd(_cmd)
        self.runthread.start()
        self.runthread.sig1.connect(self.refresh)
        self.runthread.sig2.connect(self.motor_status)

    def close_click(self):
        self.runthread.setcmd('close')
        self.runthread.start()
        self.runthread.sig1.connect(self.refresh)
        self.runthread.sig2.connect(self.motor_status)

    def send_click(self):
        cmdtext = self.textEdit_gotocommands.toPlainText()
        if cmdtext == 'clear':
                pass
        else:
                cmdtext = 'goto' + cmdtext
        self.runthread.setcmd(cmdtext)
        self.runthread.start()
        self.runthread.sig1.connect(self.refresh)
        self.runthread.sig2.connect(self.motor_status)

    def calibration_click(self):
        self.runthread.setcmd('calib')
        self.runthread.start()
        self.runthread.sig1.connect(self.refresh)
        self.runthread.sig2.connect(self.motor_status) 

    def disarm_click(self):
        self.runthread.setcmd('disarm')
        self.runthread.start()
        self.runthread.sig1.connect(self.refresh)  
        self.runthread.sig2.connect(self.motor_status)  

    def stop_click(self):
        self.runthread.stop()    
        self.disarm_click() 

    def reset_click(self):
        logging.info(' ')
        logging.info('*************************')
        logging.info('Reset')
        logging.info('*************************')
        target_mm_text = '[0,0,140,-0.3,-0.1,0]'
        cmdtext = 'goto' + target_mm_text[1:-1]
        print(cmdtext)
        self.runthread.setcmd(cmdtext)
        self.runthread.start()
        self.runthread.sig1.connect(self.refresh)
        self.runthread.sig2.connect(self.motor_status)

        self.pushButton_reset.setStyleSheet("background-color: green")
        self.pushButton_alignment.setStyleSheet("background-color: red")
        self.pushButton_alignment.setEnabled(True)
        self.pushButton_pre_curing.setStyleSheet("background-color: red")
        # self.pushButton_pre_curing.setEnabled(False)
        self.pushButton_curing.setStyleSheet('Background-color: red')
        # self.pushButton_curing.setEnabled(False)


    def alignment_click(self):
        self.runthread.setcmd('align')
        self.runthread.start()
        self.runthread.sig1.connect(self.refresh)
        self.runthread.sig2.connect(self.motor_status)
        self.pushButton_alignment.setStyleSheet("background-color: yellow")
        self.pushButton_pre_curing.setEnabled(True)

    def pre_curing_click(self):
        self.runthread.setcmd('precure')
        self.runthread.start()
        self.runthread.sig1.connect(self.refresh)
        self.runthread.sig2.connect(self.motor_status)
        self.pushButton_alignment.setStyleSheet("background-color: green")        
        self.pushButton_pre_curing.setStyleSheet("background-color: yellow")
        self.pushButton_curing.setEnabled(True)

    def curing_click(self):
        self.runthread.setcmd('curing')
        self.runthread.start()
        self.runthread.sig1.connect(self.refresh)
        self.runthread.sig2.connect(self.motor_status)
        self.pushButton_pre_curing.setStyleSheet("background-color: green")
        self.pushButton_curing.setStyleSheet('Background-color: yellow')

    def motor_status(self, _status):
        if _status == 1:
            self.label_statusdata.setText('Running')
            self.label_statusdata.setStyleSheet("color: rgb(255, 0, 0);")
        elif _status == 2:
            self.label_statusdata.setText('Auto Running')
            self.label_statusdata.setStyleSheet("color: rgb(255, 0, 0);")
        elif _status == 3:
            self.label_statusdata.setText('PreCure Running')
            self.label_statusdata.setStyleSheet("color: rgb(255, 0, 0);")
        elif _status == 4:
            self.label_statusdata.setText('Cure Running')
            self.label_statusdata.setStyleSheet("color: rgb(255, 0, 0);")
        elif _status == 5:
            self.label_statusdata.setText('Calibrating')
            self.label_statusdata.setStyleSheet("color: rgb(255, 0, 0);")            
        else:
            self.label_statusdata.setText('Idle')
            self.label_statusdata.setStyleSheet("color: rgb(0, 255, 0);")

    def refresh(self, _error_log, _target_mm, _target_counts, _real_counts, _error_flag):
        self.target_mm = _target_mm

        self.textBrowser.setText(_error_log)

        # string = str(_real_counts)
        # string = string[1:]
        # string = string[:-1]
        # self.label_realcountsdata.setText(string)

        self.lcdX.setProperty("value", _target_mm[0])
        self.lcdY.setProperty("value", _target_mm[1])
        self.lcdZ.setProperty("value", _target_mm[2])
        self.lcdRx.setProperty("value", _target_mm[3])
        self.lcdRy.setProperty("value", _target_mm[4])
        self.lcdRz.setProperty("value", _target_mm[5])

        # string = str(_target_counts)
        # string = string[1:]
        # string = string[:-1]
        # self.label_targetcountsdata.setText(string)

        if _error_flag:
                self.label_statusdata.setText('Disarmed')
                self.label_statusdata.setStyleSheet("color: rgb(255, 30, 0);")
        # else:
        #         self.label_statusdata.setText('Ready')
        #         self.label_statusdata.setStyleSheet("color: rgb(20, 255, 0);")

    def step_choose(self):
        if self.stepSizeComboBox.currentIndex() == 0:
                self.step = 0.0002
        elif self.stepSizeComboBox.currentIndex() == 1:
                self.step = 0.001
        elif self.stepSizeComboBox.currentIndex() == 2:
                self.step = 0.005
        elif self.stepSizeComboBox.currentIndex() == 3:
                self.step = 0.02
        elif self.stepSizeComboBox.currentIndex() == 4:
                self.step = 0.2
        elif self.stepSizeComboBox.currentIndex() == 5:
                self.step = 0.1
        elif self.stepSizeComboBox.currentIndex() == 6:
                self.step = 0.5
        # print(self.step)

    def product_choose(self):
        if self.productComboBox.currentIndex() == 0:
            StaticVar.productType = "1xN"
        elif self.productComboBox.currentIndex() == 1:
            StaticVar.productType = "VOA"

    def criteria_choose(self):
        if self.criteriaComboBox.currentIndex() == 0:
            StaticVar.Criteria = -0.4
        elif self.criteriaComboBox.currentIndex() == 1:
            StaticVar.Criteria = -0.25
        elif self.criteriaComboBox.currentIndex() == 2:
            StaticVar.Criteria = -0.3
        elif self.criteriaComboBox.currentIndex() == 3:
            StaticVar.Criteria = -0.35
        elif self.criteriaComboBox.currentIndex() == 4:
            StaticVar.Criteria = -0.45
        elif self.criteriaComboBox.currentIndex() == 5:
            StaticVar.Criteria = -0.5
        elif self.criteriaComboBox.currentIndex() == 6:
            StaticVar.Criteria = -0.55

    def xplus_click(self, step):
        self.target_mm[0] = self.target_mm[0] + step
        target_mm_text = str(self.target_mm)
        cmdtext = 'goto' + target_mm_text[1:-1]
        print(cmdtext)
        self.runthread.setcmd(cmdtext)
        self.runthread.start()
        self.runthread.sig1.connect(self.refresh)
        self.runthread.sig2.connect(self.motor_status)

    def xminus_click(self, step):
        self.target_mm[0] = self.target_mm[0] - step
        target_mm_text = str(self.target_mm)
        cmdtext = 'goto' + target_mm_text[1:-1]
        self.runthread.setcmd(cmdtext)
        self.runthread.start()
        self.runthread.sig1.connect(self.refresh)
        self.runthread.sig2.connect(self.motor_status)

    def yplus_click(self, step):
        self.target_mm[1] = self.target_mm[1] + step
        target_mm_text = str(self.target_mm)
        cmdtext = 'goto' + target_mm_text[1:-1]
        self.runthread.setcmd(cmdtext)
        self.runthread.start()
        self.runthread.sig1.connect(self.refresh)
        self.runthread.sig2.connect(self.motor_status)

    def yminus_click(self, step):
        self.target_mm[1] = self.target_mm[1] - step
        target_mm_text = str(self.target_mm)
        cmdtext = 'goto' + target_mm_text[1:-1]
        self.runthread.setcmd(cmdtext)
        self.runthread.start()
        self.runthread.sig1.connect(self.refresh)
        self.runthread.sig2.connect(self.motor_status)

    def zplus_click(self, step):
        self.target_mm[2] = self.target_mm[2] + step
        target_mm_text = str(self.target_mm)
        cmdtext = 'goto' + target_mm_text[1:-1]
        self.runthread.setcmd(cmdtext)
        self.runthread.start()
        self.runthread.sig1.connect(self.refresh)
        self.runthread.sig2.connect(self.motor_status)

    def zminus_click(self, step):
        self.target_mm[2] = self.target_mm[2] - step
        target_mm_text = str(self.target_mm)
        cmdtext = 'goto' + target_mm_text[1:-1]
        self.runthread.setcmd(cmdtext)
        self.runthread.start()
        self.runthread.sig1.connect(self.refresh)
        self.runthread.sig2.connect(self.motor_status)

    def Rxplus_click(self, step):
        self.target_mm[3] = self.target_mm[3] + step
        target_mm_text = str(self.target_mm)
        cmdtext = 'goto' + target_mm_text[1:-1]
        self.runthread.setcmd(cmdtext)
        self.runthread.start()
        self.runthread.sig1.connect(self.refresh)
        self.runthread.sig2.connect(self.motor_status)

    def Rxminus_click(self, step):
        self.target_mm[3] = self.target_mm[3] - step
        target_mm_text = str(self.target_mm)
        cmdtext = 'goto' + target_mm_text[1:-1]
        self.runthread.setcmd(cmdtext)
        self.runthread.start()
        self.runthread.sig1.connect(self.refresh)
        self.runthread.sig2.connect(self.motor_status)

    def Ryplus_click(self, step):
        self.target_mm[4] = self.target_mm[4] + step
        target_mm_text = str(self.target_mm)
        cmdtext = 'goto' + target_mm_text[1:-1]
        self.runthread.setcmd(cmdtext)
        self.runthread.start()
        self.runthread.sig1.connect(self.refresh)
        self.runthread.sig2.connect(self.motor_status)

    def Ryminus_click(self, step):
        self.target_mm[4] = self.target_mm[4] - step
        target_mm_text = str(self.target_mm)
        cmdtext = 'goto' + target_mm_text[1:-1]
        self.runthread.setcmd(cmdtext)
        self.runthread.start()
        self.runthread.sig1.connect(self.refresh)
        self.runthread.sig2.connect(self.motor_status)

    def Rzplus_click(self, step):
        self.target_mm[5] = self.target_mm[5] + step
        target_mm_text = str(self.target_mm)
        cmdtext = 'goto' + target_mm_text[1:-1]
        self.runthread.setcmd(cmdtext)
        self.runthread.start()
        self.runthread.sig1.connect(self.refresh)
        self.runthread.sig2.connect(self.motor_status)

    def Rzminus_click(self, step):
        self.target_mm[5] = self.target_mm[5] - step
        target_mm_text = str(self.target_mm)
        cmdtext = 'goto' + target_mm_text[1:-1]
        self.runthread.setcmd(cmdtext)
        self.runthread.start()
        self.runthread.sig1.connect(self.refresh)
        self.runthread.sig2.connect(self.motor_status)

    # Camera
    def select_camera(self, i):
        self.camera = QCamera(self.available_cameras[i])
        self.camera.setViewfinder(self.viewfinder)
        self.camera.setCaptureMode(QCamera.CaptureStillImage)
        self.camera.error.connect(lambda: self.alert(self.camera.errorString()))
        self.camera.start()
        self.videoFrame = QImage()

        self.capture = QCameraImageCapture(self.camera)
        self.capture.error.connect(lambda i, e, s: self.alert(s))

        self.current_camera_name = self.available_cameras[i].description()
        self.save_seq = 0

    def alert(self, s):
        """
        Handle errors coming from QCamera dn QCameraImageCapture by displaying alerts.
        """
        err = QErrorMessage(self)
        err.showMessage(s)

    isControllingX = False
    isControllingY = False
    isControllingZ = False
    def keyPressEvent(self, e):
        if e.key()==Qt.Key_X:
            self.label_key_press.setText("Controlling X-axis:+/-")
            self.isControllingX = True
            self.isControllingY = False
            self.isControllingZ = False
        elif e.key()==Qt.Key_Y:
            self.label_key_press.setText("Controlling Y-axis:+/-")
            self.isControllingX = False
            self.isControllingY = True
            self.isControllingZ = False
        elif e.key()==Qt.Key_Z:
            self.label_key_press.setText("Controlling Z-axis:+/-")
            self.isControllingX = False
            self.isControllingY = False
            self.isControllingZ = True
        elif e.key()==Qt.Key_Escape:
            self.label_key_press.setText("Press X/Y/Z to activate keyboard shortcut")
            self.isControllingX = False
            self.isControllingY = False
            self.isControllingZ = False

        if self.isControllingX == True:
            if e.key() == Qt.Key_Plus:
                self.xplus_click(self.step)
            elif e.key() == Qt.Key_Minus:
                self.xminus_click(self.step)
        elif self.isControllingY == True:
            if e.key() == Qt.Key_Plus:
                self.yplus_click(self.step)
            elif e.key() == Qt.Key_Minus:
                self.yminus_click(self.step)
        elif self.isControllingZ == True:
            if e.key() == Qt.Key_Plus:
                self.zplus_click(self.step)
            elif e.key() == Qt.Key_Minus:
                self.zminus_click(self.step)
        
    def updateIL(self):
        self.label_IL.setText("IL: " + str(StaticVar.IL)+" dB")
        self.label_IL.adjustSize()

class Thread(QThread):
    changePixmap = pyqtSignal(QImage)

    def run(self):
        image = cv2.VideoCapture(0)
        while True:
            ret, frame = image.read()
            if ret:
                rgbImage = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                h, w, ch = rgbImage.shape
                center = (w/2, h/2)
                M = cv2.getRotationMatrix2D(center, 180, 1)
                rotated180 = cv2.warpAffine(rgbImage, M, (w,h))

                bytePerLine = ch * w
                convertToQtFormat = QImage(rotated180.data, w, h, bytePerLine, QImage.Format_RGB888)
                p = convertToQtFormat.scaled(640, 480, Qt.KeepAspectRatio)
                self.changePixmap.emit(p)

    def stop(self):
        self.terminate()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    AppWindow = MainWindow()
    AppWindow.show()
    sys.exit(app.exec_())
