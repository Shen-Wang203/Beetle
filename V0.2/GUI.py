# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'GUI.ui'
#
# Created by: PyQt5 UI code generator 5.13.0
#
# WARNING! All changes made in this file will be lost!

# Code to generate this file
# pyuic5 -x GUI.ui -o GUI.py

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtPrintSupport import *
from PyQt5.QtMultimedia import *
from PyQt5.QtMultimediaWidgets import *
# from PyQt5 import pyqtThread, pyqtSignal
import Command_Input as cmd

import os
import sys
import time

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1120, 760)
        MainWindow.setAutoFillBackground(False)
        MainWindow.setStyleSheet("background-color: rgb(224, 224, 224);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.lcdX = QtWidgets.QLCDNumber(self.centralwidget)
        self.lcdX.setGeometry(QtCore.QRect(30, 195, 160, 70))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.lcdX.setFont(font)
        self.lcdX.setStyleSheet("background-color: rgb(224, 224, 224);\n""")
        self.lcdX.setSmallDecimalPoint(False)
        self.lcdX.setDigitCount(8)
        self.lcdX.setSegmentStyle(QtWidgets.QLCDNumber.Filled)
        self.lcdX.setProperty("value", 0.0)
        self.lcdX.setProperty("intValue", 0)
        self.lcdX.setObjectName("lcdX")
        self.radioButton_X1 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_X1.setGeometry(QtCore.QRect(70, 280, 82, 17))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.radioButton_X1.setFont(font)
        self.radioButton_X1.setStyleSheet("background-color: rgb(224, 224, 224);")
        self.radioButton_X1.setObjectName("radioButton_X1")
        self.lcdY = QtWidgets.QLCDNumber(self.centralwidget)
        self.lcdY.setGeometry(QtCore.QRect(210, 195, 160, 70))
        self.lcdY.setStyleSheet("background-color: rgb(224, 224, 224);")
        self.lcdY.setSmallDecimalPoint(False)
        self.lcdY.setDigitCount(8)
        self.lcdY.setSegmentStyle(QtWidgets.QLCDNumber.Filled)
        self.lcdY.setProperty("value", 0.0)
        self.lcdY.setProperty("intValue", 0)
        self.lcdY.setObjectName("lcdY")
        self.lcdZ = QtWidgets.QLCDNumber(self.centralwidget)
        self.lcdZ.setGeometry(QtCore.QRect(390, 195, 160, 70))
        self.lcdZ.setStyleSheet("background-color: rgb(224, 224, 224);")
        self.lcdZ.setSmallDecimalPoint(False)
        self.lcdZ.setDigitCount(8)
        self.lcdZ.setSegmentStyle(QtWidgets.QLCDNumber.Filled)
        self.lcdZ.setProperty("value", 138.0)
        self.lcdZ.setProperty("intValue", 138)
        self.lcdZ.setObjectName("lcdZ")
        self.lcdRx = QtWidgets.QLCDNumber(self.centralwidget)
        self.lcdRx.setGeometry(QtCore.QRect(570, 195, 160, 70))
        self.lcdRx.setStyleSheet("background-color: rgb(224, 224, 224);")
        self.lcdRx.setSmallDecimalPoint(False)
        self.lcdRx.setDigitCount(8)
        self.lcdRx.setSegmentStyle(QtWidgets.QLCDNumber.Filled)
        self.lcdRx.setProperty("value", 0.0)
        self.lcdRx.setProperty("intValue", 0)
        self.lcdRx.setObjectName("lcdRx")
        self.lcdRy = QtWidgets.QLCDNumber(self.centralwidget)
        self.lcdRy.setGeometry(QtCore.QRect(750, 195, 160, 70))
        self.lcdRy.setStyleSheet("background-color: rgb(224, 224, 224);")
        self.lcdRy.setSmallDecimalPoint(False)
        self.lcdRy.setDigitCount(8)
        self.lcdRy.setSegmentStyle(QtWidgets.QLCDNumber.Filled)
        self.lcdRy.setProperty("value", 0.0)
        self.lcdRy.setProperty("intValue", 0)
        self.lcdRy.setObjectName("lcdRy")
        self.lcdRz = QtWidgets.QLCDNumber(self.centralwidget)
        self.lcdRz.setGeometry(QtCore.QRect(930, 195, 160, 70))
        self.lcdRz.setStyleSheet("background-color: rgb(224, 224, 224);")
        self.lcdRz.setSmallDecimalPoint(False)
        self.lcdRz.setDigitCount(8)
        self.lcdRz.setSegmentStyle(QtWidgets.QLCDNumber.Filled)
        self.lcdRz.setProperty("value", 0.0)
        self.lcdRz.setObjectName("lcdRz")
        self.pushButton_start = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_start.setGeometry(QtCore.QRect(30, 10, 150, 60))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.pushButton_start.setFont(font)
        self.pushButton_start.setObjectName("pushButton_start")
        self.pushButton_close = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_close.setGeometry(QtCore.QRect(260, 10, 150, 60))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.pushButton_close.setFont(font)
        self.pushButton_close.setObjectName("pushButton_close")
        self.radioButton_X2 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_X2.setGeometry(QtCore.QRect(70, 310, 82, 17))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.radioButton_X2.setFont(font)
        self.radioButton_X2.setStyleSheet("background-color: rgb(224, 224, 224);")
        self.radioButton_X2.setObjectName("radioButton_X2")
        self.radioButton_X3 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_X3.setGeometry(QtCore.QRect(70, 340, 82, 17))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.radioButton_X3.setFont(font)
        self.radioButton_X3.setStyleSheet("background-color: rgb(224, 224, 224);")
        self.radioButton_X3.setObjectName("radioButton_X3")
        self.pushButton_Xp = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Xp.setGeometry(QtCore.QRect(70, 370, 51, 23))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_Xp.setFont(font)
        self.pushButton_Xp.setObjectName("pushButton_Xp")
        self.pushButton_Xm = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Xm.setGeometry(QtCore.QRect(120, 370, 51, 23))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_Xm.setFont(font)
        self.pushButton_Xm.setObjectName("pushButton_Xm")
        self.pushButton_Ym = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Ym.setGeometry(QtCore.QRect(290, 370, 51, 23))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_Ym.setFont(font)
        self.pushButton_Ym.setObjectName("pushButton_Ym")
        self.pushButton_Yp = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Yp.setGeometry(QtCore.QRect(240, 370, 51, 23))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_Yp.setFont(font)
        self.pushButton_Yp.setObjectName("pushButton_Yp")
        self.radioButton_Y3 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_Y3.setGeometry(QtCore.QRect(240, 340, 82, 17))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.radioButton_Y3.setFont(font)
        self.radioButton_Y3.setStyleSheet("background-color: rgb(224, 224, 224);")
        self.radioButton_Y3.setObjectName("radioButton_Y3")
        self.radioButton_Y2 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_Y2.setGeometry(QtCore.QRect(240, 310, 82, 17))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.radioButton_Y2.setFont(font)
        self.radioButton_Y2.setStyleSheet("background-color: rgb(224, 224, 224);")
        self.radioButton_Y2.setObjectName("radioButton_Y2")
        self.radioButton_Y1 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_Y1.setGeometry(QtCore.QRect(240, 280, 82, 17))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.radioButton_Y1.setFont(font)
        self.radioButton_Y1.setStyleSheet("background-color: rgb(224, 224, 224);")
        self.radioButton_Y1.setObjectName("radioButton_Y1")
        self.pushButton_Zm = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Zm.setGeometry(QtCore.QRect(470, 370, 51, 23))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_Zm.setFont(font)
        self.pushButton_Zm.setObjectName("pushButton_Zm")
        self.pushButton_Zp = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Zp.setGeometry(QtCore.QRect(420, 370, 51, 23))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_Zp.setFont(font)
        self.pushButton_Zp.setObjectName("pushButton_Zp")
        self.radioButton_Z3 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_Z3.setGeometry(QtCore.QRect(420, 340, 82, 17))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.radioButton_Z3.setFont(font)
        self.radioButton_Z3.setStyleSheet("background-color: rgb(224, 224, 224);")
        self.radioButton_Z3.setObjectName("radioButton_Z3")
        self.radioButton_Z2 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_Z2.setGeometry(QtCore.QRect(420, 310, 82, 17))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.radioButton_Z2.setFont(font)
        self.radioButton_Z2.setStyleSheet("background-color: rgb(224, 224, 224);")
        self.radioButton_Z2.setObjectName("radioButton_Z2")
        self.radioButton_Z1 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_Z1.setGeometry(QtCore.QRect(420, 280, 82, 17))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.radioButton_Z1.setFont(font)
        self.radioButton_Z1.setStyleSheet("background-color: rgb(224, 224, 224);")
        self.radioButton_Z1.setObjectName("radioButton_Z1")
        self.pushButton_Rxm = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Rxm.setGeometry(QtCore.QRect(650, 370, 51, 23))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_Rxm.setFont(font)
        self.pushButton_Rxm.setObjectName("pushButton_Rxm")
        self.pushButton_Rxp = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Rxp.setGeometry(QtCore.QRect(600, 370, 51, 23))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_Rxp.setFont(font)
        self.pushButton_Rxp.setObjectName("pushButton_Rxp")
        self.radioButton_Rx3 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_Rx3.setGeometry(QtCore.QRect(600, 340, 82, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.radioButton_Rx3.setFont(font)
        self.radioButton_Rx3.setStyleSheet("background-color: rgb(224, 224, 224);")
        self.radioButton_Rx3.setObjectName("radioButton_Rx3")
        self.radioButton_Rx2 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_Rx2.setGeometry(QtCore.QRect(600, 310, 91, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.radioButton_Rx2.setFont(font)
        self.radioButton_Rx2.setStyleSheet("background-color: rgb(224, 224, 224);")
        self.radioButton_Rx2.setObjectName("radioButton_Rx2")
        self.radioButton_Rx1 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_Rx1.setGeometry(QtCore.QRect(600, 280, 91, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.radioButton_Rx1.setFont(font)
        self.radioButton_Rx1.setStyleSheet("background-color: rgb(224, 224, 224);")
        self.radioButton_Rx1.setObjectName("radioButton_Rx1")
        self.pushButton_Ryp = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Ryp.setGeometry(QtCore.QRect(780, 370, 51, 23))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_Ryp.setFont(font)
        self.pushButton_Ryp.setObjectName("pushButton_Ryp")
        self.pushButton_Rym = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Rym.setGeometry(QtCore.QRect(830, 370, 51, 23))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_Rym.setFont(font)
        self.pushButton_Rym.setObjectName("pushButton_Rym")
        self.radioButton_Ry3 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_Ry3.setGeometry(QtCore.QRect(780, 340, 82, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.radioButton_Ry3.setFont(font)
        self.radioButton_Ry3.setStyleSheet("background-color: rgb(224, 224, 224);")
        self.radioButton_Ry3.setObjectName("radioButton_Ry3")
        self.radioButton_Ry2 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_Ry2.setGeometry(QtCore.QRect(780, 310, 91, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.radioButton_Ry2.setFont(font)
        self.radioButton_Ry2.setStyleSheet("background-color: rgb(224, 224, 224);")
        self.radioButton_Ry2.setObjectName("radioButton_Ry2")
        self.radioButton_Ry1 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_Ry1.setGeometry(QtCore.QRect(780, 280, 91, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.radioButton_Ry1.setFont(font)
        self.radioButton_Ry1.setStyleSheet("background-color: rgb(224, 224, 224);")
        self.radioButton_Ry1.setObjectName("radioButton_Ry1")
        self.pushButton_Rzp = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Rzp.setGeometry(QtCore.QRect(960, 370, 51, 23))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_Rzp.setFont(font)
        self.pushButton_Rzp.setObjectName("pushButton_Rzp")
        self.pushButton_Rzm = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Rzm.setGeometry(QtCore.QRect(1010, 370, 51, 23))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_Rzm.setFont(font)
        self.pushButton_Rzm.setObjectName("pushButton_Rzm")
        self.radioButton_Rz3 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_Rz3.setGeometry(QtCore.QRect(960, 340, 82, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.radioButton_Rz3.setFont(font)
        self.radioButton_Rz3.setStyleSheet("background-color: rgb(224, 224, 224);")
        self.radioButton_Rz3.setObjectName("radioButton_Rz3")
        self.radioButton_Rz2 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_Rz2.setGeometry(QtCore.QRect(960, 310, 91, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.radioButton_Rz2.setFont(font)
        self.radioButton_Rz2.setStyleSheet("background-color: rgb(224, 224, 224);")
        self.radioButton_Rz2.setObjectName("radioButton_Rz2")
        self.radioButton_Rz1 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_Rz1.setGeometry(QtCore.QRect(960, 280, 91, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.radioButton_Rz1.setFont(font)
        self.radioButton_Rz1.setStyleSheet("background-color: rgb(224, 224, 224);")
        self.radioButton_Rz1.setObjectName("radioButton_Rz1")
        self.textEdit_gotocommands = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_gotocommands.setGeometry(QtCore.QRect(40, 580, 320, 80))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.textEdit_gotocommands.setFont(font)
        self.textEdit_gotocommands.setObjectName("textEdit_gotocommands")
        self.verticalScrollBar_goto = QtWidgets.QScrollBar(self.centralwidget)
        self.verticalScrollBar_goto.setGeometry(QtCore.QRect(360, 580, 20, 81))
        self.verticalScrollBar_goto.setOrientation(QtCore.Qt.Vertical)
        self.verticalScrollBar_goto.setObjectName("verticalScrollBar_goto")
        self.pushButton_gotosend = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_gotosend.setGeometry(QtCore.QRect(390, 580, 111, 81))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_gotosend.setFont(font)
        self.pushButton_gotosend.setObjectName("pushButton_gotosend")
        self.label_errorlog = QtWidgets.QLabel(self.centralwidget)
        self.label_errorlog.setGeometry(QtCore.QRect(740, 540, 81, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_errorlog.setFont(font)
        self.label_errorlog.setObjectName("label_errorlog")
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(740, 570, 331, 131))
        self.textBrowser.setObjectName("textBrowser")
        self.label_status = QtWidgets.QLabel(self.centralwidget)
        self.label_status.setGeometry(QtCore.QRect(780, 10, 150, 40))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label_status.setFont(font)
        self.label_status.setObjectName("label_status")
        self.label_statusdata = QtWidgets.QLabel(self.centralwidget)
        self.label_statusdata.setGeometry(QtCore.QRect(909, 10, 161, 40))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label_statusdata.setFont(font)
        self.label_statusdata.setStyleSheet("color: rgb(255, 0, 0);")
        self.label_statusdata.setObjectName("label_statusdata")
        self.label_target_mm = QtWidgets.QLabel(self.centralwidget)
        self.label_target_mm.setGeometry(QtCore.QRect(340, 70, 440, 80))
        font = QtGui.QFont()
        font.setPointSize(35)
        self.label_target_mm.setFont(font)
        self.label_target_mm.setAlignment(QtCore.Qt.AlignCenter)
        self.label_target_mm.setObjectName("label_target_mm")
        self.label_X = QtWidgets.QLabel(self.centralwidget)
        self.label_X.setGeometry(QtCore.QRect(85, 150, 50, 40))
        font = QtGui.QFont()
        font.setPointSize(25)
        self.label_X.setFont(font)
        self.label_X.setAlignment(QtCore.Qt.AlignCenter)
        self.label_X.setObjectName("label_X")
        self.label_Y = QtWidgets.QLabel(self.centralwidget)
        self.label_Y.setGeometry(QtCore.QRect(265, 150, 50, 40))
        font = QtGui.QFont()
        font.setPointSize(25)
        self.label_Y.setFont(font)
        self.label_Y.setAlignment(QtCore.Qt.AlignCenter)
        self.label_Y.setObjectName("label_Y")
        self.label_Z = QtWidgets.QLabel(self.centralwidget)
        self.label_Z.setGeometry(QtCore.QRect(445, 150, 50, 40))
        font = QtGui.QFont()
        font.setPointSize(25)
        self.label_Z.setFont(font)
        self.label_Z.setAlignment(QtCore.Qt.AlignCenter)
        self.label_Z.setObjectName("label_Z")
        self.label_Rx = QtWidgets.QLabel(self.centralwidget)
        self.label_Rx.setGeometry(QtCore.QRect(625, 150, 50, 40))
        font = QtGui.QFont()
        font.setPointSize(25)
        self.label_Rx.setFont(font)
        self.label_Rx.setAlignment(QtCore.Qt.AlignCenter)
        self.label_Rx.setObjectName("label_Rx")
        self.label_Ry = QtWidgets.QLabel(self.centralwidget)
        self.label_Ry.setGeometry(QtCore.QRect(805, 150, 50, 40))
        font = QtGui.QFont()
        font.setPointSize(25)
        self.label_Ry.setFont(font)
        self.label_Ry.setAlignment(QtCore.Qt.AlignCenter)
        self.label_Ry.setObjectName("label_Ry")
        self.label_Rz = QtWidgets.QLabel(self.centralwidget)
        self.label_Rz.setGeometry(QtCore.QRect(985, 150, 50, 40))
        font = QtGui.QFont()
        font.setPointSize(25)
        self.label_Rz.setFont(font)
        self.label_Rz.setAlignment(QtCore.Qt.AlignCenter)
        self.label_Rz.setObjectName("label_Rz")
        self.label_T1xT3y = QtWidgets.QLabel(self.centralwidget)
        self.label_T1xT3y.setGeometry(QtCore.QRect(230, 420, 810, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_T1xT3y.setFont(font)
        self.label_T1xT3y.setAlignment(QtCore.Qt.AlignCenter)
        self.label_T1xT3y.setObjectName("label_T1xT3y")
        self.label_realcounts = QtWidgets.QLabel(self.centralwidget)
        self.label_realcounts.setGeometry(QtCore.QRect(40, 440, 200, 40))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label_realcounts.setFont(font)
        self.label_realcounts.setObjectName("label_realcounts")
        self.label_targetcounts = QtWidgets.QLabel(self.centralwidget)
        self.label_targetcounts.setGeometry(QtCore.QRect(40, 490, 200, 40))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label_targetcounts.setFont(font)
        self.label_targetcounts.setObjectName("label_targetcounts")
        self.label_realcountsdata = QtWidgets.QLabel(self.centralwidget)
        self.label_realcountsdata.setGeometry(QtCore.QRect(240, 440, 810, 40))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.label_realcountsdata.setFont(font)
        self.label_realcountsdata.setAlignment(QtCore.Qt.AlignCenter)
        self.label_realcountsdata.setObjectName("label_realcountsdata")
        self.label_targetcountsdata = QtWidgets.QLabel(self.centralwidget)
        self.label_targetcountsdata.setGeometry(QtCore.QRect(240, 490, 810, 40))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.label_targetcountsdata.setFont(font)
        self.label_targetcountsdata.setAlignment(QtCore.Qt.AlignCenter)
        self.label_targetcountsdata.setObjectName("label_targetcountsdata")
        self.label_goto = QtWidgets.QLabel(self.centralwidget)
        self.label_goto.setGeometry(QtCore.QRect(40, 540, 280, 40))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_goto.setFont(font)
        self.label_goto.setObjectName("label_goto")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1120, 21))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuConnection = QtWidgets.QMenu(self.menubar)
        self.menuConnection.setObjectName("menuConnection")
        self.menuDebug = QtWidgets.QMenu(self.menubar)
        self.menuDebug.setObjectName("menuDebug")
        self.menuDemo = QtWidgets.QMenu(self.menubar)
        self.menuDemo.setObjectName("menuDemo")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionOpen = QtWidgets.QAction(MainWindow)
        self.actionOpen.setObjectName("actionOpen")
        self.actionDemo_1 = QtWidgets.QAction(MainWindow)
        self.actionDemo_1.setObjectName("actionDemo_1")
        self.actionDemo_2 = QtWidgets.QAction(MainWindow)
        self.actionDemo_2.setObjectName("actionDemo_2")
        self.actionDemo_3 = QtWidgets.QAction(MainWindow)
        self.actionDemo_3.setObjectName("actionDemo_3")
        self.actionDemo_4 = QtWidgets.QAction(MainWindow)
        self.actionDemo_4.setObjectName("actionDemo_4")
        self.menuFile.addAction(self.actionOpen)
        self.menuDemo.addAction(self.actionDemo_1)
        self.menuDemo.addAction(self.actionDemo_2)
        self.menuDemo.addAction(self.actionDemo_3)
        self.menuDemo.addAction(self.actionDemo_4)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuConnection.menuAction())
        self.menubar.addAction(self.menuDebug.menuAction())
        self.menubar.addAction(self.menuDemo.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)




        # Camera settings
        self.available_cameras = QCameraInfo.availableCameras()
        if not self.available_cameras:
            pass #quit

        # self.status = QStatusBar()
        # self.setStatusBar(self.status)
        self.viewfinder = QCameraViewfinder()
        self.viewfinder.show()

        # Set the deafault camera
        self.select_camera(0)

        # Setup tools
        camera_toolbar = QToolBar("Camera")
        camera_toolbar.setIconSize(QSize(14, 14))
        # self.addToolBar(camera_toolbar)

        camera_selector = QComboBox()
        camera_selector.addItems([c.description() for c in self.available_cameras])
        camera_selector.currentIndexChanged.connect(self.select_camera)

        camera_toolbar.addWidget(camera_selector)

        # Shen's work
        self.pushButton_start.clicked.connect(self.calibration_click)
        self.pushButton_close.clicked.connect(self.close_click)
        self.actionDemo_1.triggered.connect(lambda: self.click_to_send('demo1'))
        self.actionDemo_2.triggered.connect(lambda: self.click_to_send('demo2'))
        self.actionDemo_3.triggered.connect(lambda: self.click_to_send('demo3'))
        self.actionDemo_4.triggered.connect(lambda: self.click_to_send('auto'))
        self.pushButton_gotosend.clicked.connect(self.send_click)
        self.radioButton_X1.toggled.connect(lambda: self.step_choose(self.radioButton_X1))
        self.radioButton_X2.toggled.connect(lambda: self.step_choose(self.radioButton_X2))
        self.radioButton_X3.toggled.connect(lambda: self.step_choose(self.radioButton_X3))
        self.radioButton_Y1.toggled.connect(lambda: self.step_choose(self.radioButton_Y1))
        self.radioButton_Y2.toggled.connect(lambda: self.step_choose(self.radioButton_Y2))
        self.radioButton_Y3.toggled.connect(lambda: self.step_choose(self.radioButton_Y3))
        self.radioButton_Z1.toggled.connect(lambda: self.step_choose(self.radioButton_Z1))
        self.radioButton_Z2.toggled.connect(lambda: self.step_choose(self.radioButton_Z2))
        self.radioButton_Z3.toggled.connect(lambda: self.step_choose(self.radioButton_Z3))
        self.radioButton_Rx1.toggled.connect(lambda: self.step_choose(self.radioButton_Rx1))
        self.radioButton_Rx2.toggled.connect(lambda: self.step_choose(self.radioButton_Rx2))
        self.radioButton_Rx3.toggled.connect(lambda: self.step_choose(self.radioButton_Rx3))
        self.radioButton_Ry1.toggled.connect(lambda: self.step_choose(self.radioButton_Ry1))
        self.radioButton_Ry2.toggled.connect(lambda: self.step_choose(self.radioButton_Ry2))
        self.radioButton_Ry3.toggled.connect(lambda: self.step_choose(self.radioButton_Ry3))
        self.radioButton_Rz1.toggled.connect(lambda: self.step_choose(self.radioButton_Rz1))
        self.radioButton_Rz2.toggled.connect(lambda: self.step_choose(self.radioButton_Rz2))
        self.radioButton_Rz3.toggled.connect(lambda: self.step_choose(self.radioButton_Rz3))                        
        self.pushButton_Xp.clicked.connect(lambda: self.xplus_click(self.step))
        self.pushButton_Xm.clicked.connect(lambda: self.xminus_click(self.step))
        self.pushButton_Yp.clicked.connect(lambda: self.yplus_click(self.step))
        self.pushButton_Ym.clicked.connect(lambda: self.yminus_click(self.step))
        self.pushButton_Zp.clicked.connect(lambda: self.zplus_click(self.step))
        self.pushButton_Zm.clicked.connect(lambda: self.zminus_click(self.step))
        self.pushButton_Rxp.clicked.connect(lambda: self.Rxplus_click(self.step))
        self.pushButton_Rxm.clicked.connect(lambda: self.Rxminus_click(self.step))
        self.pushButton_Ryp.clicked.connect(lambda: self.Ryplus_click(self.step))
        self.pushButton_Rym.clicked.connect(lambda: self.Ryminus_click(self.step))
        self.pushButton_Rzp.clicked.connect(lambda: self.Rzplus_click(self.step))
        self.pushButton_Rzm.clicked.connect(lambda: self.Rzminus_click(self.step))

        

    step = 0
    target_mm = [0,0,138,0,0,0]

    def select_camera(self, i):
        self.camera = QCamera(self.available_cameras[i])
        self.camera.setViewfinder(self.viewfinder)
        self.camera.setCaptureMode(QCamera.CaptureStillImage)
        self.camera.error.connect(lambda: self.alert(self.camera.errorString()))
        self.camera.start()

        self.capture = QCameraImageCapture(self.camera)
        self.capture.error.connect(lambda i, e, s: self.alert(s))
        self.capture.imageCaptured.connect(lambda d, i: self.status.showMessage("Image %04d captured" % self.save_seq))

        self.current_camera_name = self.available_cameras[i].description()
        self.save_seq = 0

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "HPP System"))
        self.radioButton_X1.setText(_translate("MainWindow", "0.2 um"))
        self.pushButton_start.setText(_translate("MainWindow", "Calibration"))
        self.pushButton_close.setText(_translate("MainWindow", "Close"))
        self.radioButton_X2.setText(_translate("MainWindow", "2 um"))
        self.radioButton_X3.setText(_translate("MainWindow", "20 um"))
        self.pushButton_Xp.setText(_translate("MainWindow", "+"))
        self.pushButton_Xm.setText(_translate("MainWindow", "-"))
        self.pushButton_Ym.setText(_translate("MainWindow", "-"))
        self.pushButton_Yp.setText(_translate("MainWindow", "+"))
        self.radioButton_Y3.setText(_translate("MainWindow", "20 um"))
        self.radioButton_Y2.setText(_translate("MainWindow", "2 um"))
        self.radioButton_Y1.setText(_translate("MainWindow", "0.2 um"))
        self.pushButton_Zm.setText(_translate("MainWindow", "-"))
        self.pushButton_Zp.setText(_translate("MainWindow", "+"))
        self.radioButton_Z3.setText(_translate("MainWindow", "20 um"))
        self.radioButton_Z2.setText(_translate("MainWindow", "2 um"))
        self.radioButton_Z1.setText(_translate("MainWindow", "0.2 um"))
        self.pushButton_Rxm.setText(_translate("MainWindow", "-"))
        self.pushButton_Rxp.setText(_translate("MainWindow", "+"))
        self.radioButton_Rx3.setText(_translate("MainWindow", "0.5 Deg"))
        self.radioButton_Rx2.setText(_translate("MainWindow", "0.1 Deg"))
        self.radioButton_Rx1.setText(_translate("MainWindow", "0.01 Deg"))
        self.pushButton_Ryp.setText(_translate("MainWindow", "+"))
        self.pushButton_Rym.setText(_translate("MainWindow", "-"))
        self.radioButton_Ry3.setText(_translate("MainWindow", "0.5 Deg"))
        self.radioButton_Ry2.setText(_translate("MainWindow", "0.1 Deg"))
        self.radioButton_Ry1.setText(_translate("MainWindow", "0.01 Deg"))
        self.pushButton_Rzp.setText(_translate("MainWindow", "+"))
        self.pushButton_Rzm.setText(_translate("MainWindow", "-"))
        self.radioButton_Rz3.setText(_translate("MainWindow", "0.5 Deg"))
        self.radioButton_Rz2.setText(_translate("MainWindow", "0.1 Deg"))
        self.radioButton_Rz1.setText(_translate("MainWindow", "0.01 Deg"))
        self.pushButton_gotosend.setText(_translate("MainWindow", "SEND"))
        self.label_errorlog.setText(_translate("MainWindow", "Error Log:"))
        self.textBrowser.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">No Error</p></body></html>"))
        self.label_status.setText(_translate("MainWindow", "STATUS:"))
        self.label_statusdata.setText(_translate("MainWindow", "DisArmed"))
        self.label_target_mm.setText(_translate("MainWindow", "Target Position(mm)"))
        self.label_X.setText(_translate("MainWindow", "X"))
        self.label_Y.setText(_translate("MainWindow", "Y"))
        self.label_Z.setText(_translate("MainWindow", "Z"))
        self.label_Rx.setText(_translate("MainWindow", "Rx"))
        self.label_Ry.setText(_translate("MainWindow", "Ry"))
        self.label_Rz.setText(_translate("MainWindow", "Rz"))
        self.label_T1xT3y.setText(_translate("MainWindow", "T1x,      T1y,      T2x,      T2y,      T3x,      T3y"))
        self.label_realcounts.setText(_translate("MainWindow", "Real-time Counts:"))
        self.label_targetcounts.setText(_translate("MainWindow", "Target Counts:"))
        self.label_realcountsdata.setText(_translate("MainWindow", "2150, -2511, 139, -1021, -886, -1523"))
        self.label_targetcountsdata.setText(_translate("MainWindow", "2150, -2511, 139, -1021, -886, -1523"))
        self.label_goto.setText(_translate("MainWindow", "Goto Commands (Seperate with \',\')"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuConnection.setTitle(_translate("MainWindow", "Connection"))
        self.menuDebug.setTitle(_translate("MainWindow", "Debug"))
        self.menuDemo.setTitle(_translate("MainWindow", "Demo"))
        self.actionOpen.setText(_translate("MainWindow", "Open"))
        self.actionDemo_1.setText(_translate("MainWindow", "Demo 1"))
        self.actionDemo_2.setText(_translate("MainWindow", "Demo 2"))
        self.actionDemo_3.setText(_translate("MainWindow", "Demo 3"))
        self.actionDemo_4.setText(_translate("MainWindow", "Auto Demo"))

        self.runthread = cmd.CMDInputThread()


    def click_to_send(self, _cmd):
        self.runthread.setcmd(_cmd)
        self.runthread.start()
        self.runthread.sig1.connect(self.refresh)
    
    def close_click(self):
        # cmd.CMDInputThread().enter_commands('close')
        # self.refresh(cmd.error_log, cmd.real_counts, cmd.target_mm, cmd.target_counts)
        self.runthread.setcmd('close')
        self.runthread.start()
        self.runthread.sig1.connect(self.refresh)
        # sys.exit()

    def send_click(self):
        cmdtext = self.textEdit_gotocommands.toPlainText()
        if cmdtext == 'clear':
            pass
        else:
            cmdtext = 'goto' + cmdtext
        # cmd.CMDInputThread().enter_commands(cmdtext)
        # self.refresh(cmd.error_log, cmd.real_counts, cmd.target_mm, cmd.target_counts)
        self.runthread.setcmd(cmdtext)
        self.runthread.start()
        self.runthread.sig1.connect(self.refresh)

    def calibration_click(self):
        # self.lineEdit_status_2.setText('Calibrating')
        # self.lineEdit_status_2.setStyleSheet("color: rgb(85, 30, 255);")    
        # cmd.CMDInputThread().enter_commands('start')
        self.runthread.setcmd('start')
        self.runthread.start()
        self.runthread.sig1.connect(self.refresh)             
    
    def refresh(self, _error_log, _target_mm, _target_counts, _real_counts, _error_flag):
        self.target_mm = _target_mm

        self.textBrowser.setText(_error_log)

        string = str(_real_counts)
        string = string[1:]
        string = string[:-1]
        self.label_realcountsdata.setText(string)
    
        self.lcdX.setProperty("value", _target_mm[0])
        self.lcdY.setProperty("value", _target_mm[1])
        self.lcdZ.setProperty("value", _target_mm[2])
        self.lcdRx.setProperty("value", _target_mm[3])
        self.lcdRy.setProperty("value", _target_mm[4])
        self.lcdRz.setProperty("value", _target_mm[5])

        string = str(_target_counts)
        string = string[1:] 
        string = string[:-1]        
        self.label_targetcountsdata.setText(string)
        
        if _error_flag:
            self.label_statusdata.setText('DisArmed')
            self.label_statusdata.setStyleSheet("color: rgb(255, 30, 0);")
        else:
            self.label_statusdata.setText('Ready')
            self.label_statusdata.setStyleSheet("color: rgb(20, 255, 0);")

    def step_choose(self, radioButton):
        if radioButton.text() == '0.2 um':
            if radioButton.isChecked() == True:
                self.step = 0.0002
        elif radioButton.text() == '2 um':
            if radioButton.isChecked() == True:
                self.step = 0.002        
        elif radioButton.text() == '20 um':
            if radioButton.isChecked() == True:
                self.step = 0.020
        elif radioButton.text() == '0.01 Deg':
            if radioButton.isChecked() == True:
                self.step = 0.01    
        elif radioButton.text() == '0.1 Deg':
            if radioButton.isChecked() == True:
                self.step = 0.1
        elif radioButton.text() == '0.5 Deg':
            if radioButton.isChecked() == True:
                self.step = 0.5
        else:
            pass
        print(self.step)

    def xplus_click(self, step):
        self.target_mm[0] = self.target_mm[0] + step
        target_mm_text = str(self.target_mm)
        cmdtext = 'goto' + target_mm_text[1:-1]
        print(cmdtext)
        self.runthread.setcmd(cmdtext)
        self.runthread.start()
        self.runthread.sig1.connect(self.refresh)

    def xminus_click(self, step):
        self.target_mm[0] = self.target_mm[0] - step
        target_mm_text = str(self.target_mm)
        cmdtext = 'goto' + target_mm_text[1:-1]
        self.runthread.setcmd(cmdtext)
        self.runthread.start()
        self.runthread.sig1.connect(self.refresh)

    def yplus_click(self, step):
        self.target_mm[1] = self.target_mm[1] + step
        target_mm_text = str(self.target_mm)
        cmdtext = 'goto' + target_mm_text[1:-1]
        self.runthread.setcmd(cmdtext)
        self.runthread.start()
        self.runthread.sig1.connect(self.refresh)

    def yminus_click(self, step):
        self.target_mm[1] = self.target_mm[1] - step
        target_mm_text = str(self.target_mm)
        cmdtext = 'goto' + target_mm_text[1:-1]
        self.runthread.setcmd(cmdtext)
        self.runthread.start()
        self.runthread.sig1.connect(self.refresh)

    def zplus_click(self, step):
        self.target_mm[2] = self.target_mm[2] + step
        target_mm_text = str(self.target_mm)
        cmdtext = 'goto' + target_mm_text[1:-1]
        self.runthread.setcmd(cmdtext)
        self.runthread.start()
        self.runthread.sig1.connect(self.refresh)

    def zminus_click(self, step):
        self.target_mm[2] = self.target_mm[2] - step
        target_mm_text = str(self.target_mm)
        cmdtext = 'goto' + target_mm_text[1:-1]
        self.runthread.setcmd(cmdtext)
        self.runthread.start()
        self.runthread.sig1.connect(self.refresh)

    def Rxplus_click(self, step):
        self.target_mm[3] = self.target_mm[3] + step
        target_mm_text = str(self.target_mm)
        cmdtext = 'goto' + target_mm_text[1:-1]
        self.runthread.setcmd(cmdtext)
        self.runthread.start()
        self.runthread.sig1.connect(self.refresh)

    def Rxminus_click(self, step):
        self.target_mm[3] = self.target_mm[3] - step
        target_mm_text = str(self.target_mm)
        cmdtext = 'goto' + target_mm_text[1:-1]
        self.runthread.setcmd(cmdtext)
        self.runthread.start()
        self.runthread.sig1.connect(self.refresh)

    def Ryplus_click(self, step):
        self.target_mm[4] = self.target_mm[4] + step
        target_mm_text = str(self.target_mm)
        cmdtext = 'goto' + target_mm_text[1:-1]
        self.runthread.setcmd(cmdtext)
        self.runthread.start()
        self.runthread.sig1.connect(self.refresh)

    def Ryminus_click(self, step):
        self.target_mm[4] = self.target_mm[4] - step
        target_mm_text = str(self.target_mm)
        cmdtext = 'goto' + target_mm_text[1:-1]
        self.runthread.setcmd(cmdtext)
        self.runthread.start()
        self.runthread.sig1.connect(self.refresh)

    def Rzplus_click(self, step):
        self.target_mm[5] = self.target_mm[5] + step
        target_mm_text = str(self.target_mm)
        cmdtext = 'goto' + target_mm_text[1:-1]
        self.runthread.setcmd(cmdtext)
        self.runthread.start()
        self.runthread.sig1.connect(self.refresh)

    def Rzminus_click(self, step):
        self.target_mm[5] = self.target_mm[5] - step
        target_mm_text = str(self.target_mm)
        cmdtext = 'goto' + target_mm_text[1:-1]
        self.runthread.setcmd(cmdtext)
        self.runthread.start()
        self.runthread.sig1.connect(self.refresh)

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())